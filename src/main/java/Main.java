import javax.swing.*;
import java.awt.*;
import java.net.URI;
import java.io.File;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.*;



public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    private String regFormPath = null;
    private String membershipFormPath = null; 
    private Stack stack = new Stack();
    private Queue applicantQueue = new Queue(); // Create Queue object
    private boolean isReversed = false; // Track if the list is reversed
    private LinkedList linkedList = new LinkedList(); // Initialize linked list
    
    //SUGGESTED TAB
    private SuggestedStack suggestedstack = new SuggestedStack();

    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        buttonMembershipTab = new javax.swing.JLabel();
        buttonHomeTab = new javax.swing.JLabel();
        buttonAdminTab = new javax.swing.JLabel();
        buttonNewsTab = new javax.swing.JLabel();
        buttonEventsTab = new javax.swing.JLabel();
        buttonSuggestTab = new javax.swing.JLabel();
        buttonAboutUsTab = new javax.swing.JLabel();
        bgSidePanel = new javax.swing.JLabel();
        tabs = new javax.swing.JTabbedPane();
        HomeTab = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        MembershipTab = new javax.swing.JPanel();
        txtName = new javax.swing.JTextField();
        txtYearLevel = new javax.swing.JComboBox<>();
        txtCourse = new javax.swing.JComboBox<>();
        txtContact = new javax.swing.JTextField();
        buttonDownloadSOMF = new javax.swing.JLabel();
        buttonUploadRegForm = new javax.swing.JLabel();
        buttonViewRegForm = new javax.swing.JLabel();
        buttonUploadMembershipForm = new javax.swing.JLabel();
        buttonViewMembershipForm = new javax.swing.JLabel();
        buttonApply = new javax.swing.JLabel();
        bgMembershipTab = new javax.swing.JLabel();
        AdminTab = new javax.swing.JPanel();
        txtCurrentEnqueuedNameAdmin = new javax.swing.JLabel();
        txtCurrentEnqueuedYearLevelAdmin = new javax.swing.JLabel();
        txtCurrentEnqueuedCourseAdmin = new javax.swing.JLabel();
        txtCurrentEnqueuedContactAdmin = new javax.swing.JLabel();
        txtCurrentNumberOfEnqueuedAdmin = new javax.swing.JLabel();
        buttonViewCurrentEnqueuedRegFormAdmin = new javax.swing.JLabel();
        buttonViewCurrentEnqueuedMembershipFormAdmin = new javax.swing.JLabel();
        buttonApproveCurrentEnqueuedAdmin = new javax.swing.JLabel();
        buttonDeclineCurrentEnqueuedAdmin = new javax.swing.JLabel();
        txtSortMembers = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMembersAdmin = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        buttonReverseMembersList = new javax.swing.JButton();
        buttonSelectedNodeRowViewRegForm = new javax.swing.JLabel();
        buttonSelectedNodeRowViewMembershipForm = new javax.swing.JLabel();
        bgAdminTab = new javax.swing.JLabel();
        NewsTab = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        EventsTab = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        SuggestTab = new javax.swing.JPanel();
        txtSuggestName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSuggestUser = new javax.swing.JTextArea();
        buttonPostSuggested = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtPosted = new javax.swing.JTextPane();
        bgSuggestTab = new javax.swing.JLabel();
        AboutUsTab = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        buttonMembershipTab.setForeground(new java.awt.Color(16, 16, 16));
        buttonMembershipTab.setText("     .");
        buttonMembershipTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonMembershipTabMouseClicked(evt);
            }
        });
        jPanel1.add(buttonMembershipTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 156, 220, 60));

        buttonHomeTab.setForeground(new java.awt.Color(16, 16, 16));
        buttonHomeTab.setText(".");
        buttonHomeTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonHomeTabMouseClicked(evt);
            }
        });
        jPanel1.add(buttonHomeTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 36, 60, 50));

        buttonAdminTab.setForeground(new java.awt.Color(16, 16, 16));
        buttonAdminTab.setText(".");
        buttonAdminTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonAdminTabMouseClicked(evt);
            }
        });
        jPanel1.add(buttonAdminTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 40, 50, 50));

        buttonNewsTab.setForeground(new java.awt.Color(16, 16, 16));
        buttonNewsTab.setText(".");
        buttonNewsTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonNewsTabMouseClicked(evt);
            }
        });
        jPanel1.add(buttonNewsTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 236, 210, 70));

        buttonEventsTab.setForeground(new java.awt.Color(16, 16, 16));
        buttonEventsTab.setText(".");
        buttonEventsTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonEventsTabMouseClicked(evt);
            }
        });
        jPanel1.add(buttonEventsTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(77, 326, 200, 60));

        buttonSuggestTab.setForeground(new java.awt.Color(16, 16, 16));
        buttonSuggestTab.setText(".");
        buttonSuggestTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonSuggestTabMouseClicked(evt);
            }
        });
        jPanel1.add(buttonSuggestTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 410, 210, 70));

        buttonAboutUsTab.setForeground(new java.awt.Color(16, 16, 16));
        buttonAboutUsTab.setText(".");
        buttonAboutUsTab.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonAboutUsTabMouseClicked(evt);
            }
        });
        jPanel1.add(buttonAboutUsTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 496, 210, 70));

        bgSidePanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/membership.png"))); // NOI18N
        bgSidePanel.setText("jLabel1");
        jPanel1.add(bgSidePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 337, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 630));
        jPanel1.getAccessibleContext().setAccessibleName("");

        HomeTab.setBackground(new java.awt.Color(16, 16, 16));
        HomeTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/HOME (1).png"))); // NOI18N
        jLabel4.setText("HOME");
        HomeTab.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, -1));

        tabs.addTab("Home", HomeTab);

        MembershipTab.setBackground(new java.awt.Color(16, 16, 16));
        MembershipTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtName.setBackground(new java.awt.Color(16, 16, 16));
        txtName.setForeground(new java.awt.Color(255, 255, 255));
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        MembershipTab.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 150, 160, -1));

        txtYearLevel.setBackground(new java.awt.Color(16, 16, 16));
        txtYearLevel.setForeground(new java.awt.Color(255, 255, 255));
        txtYearLevel.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4" }));
        MembershipTab.add(txtYearLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, 120, -1));

        txtCourse.setBackground(new java.awt.Color(16, 16, 16));
        txtCourse.setForeground(new java.awt.Color(255, 255, 255));
        txtCourse.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "BSCS", "BSIT", "BSEMC" }));
        MembershipTab.add(txtCourse, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 120, -1));

        txtContact.setBackground(new java.awt.Color(16, 16, 16));
        txtContact.setForeground(new java.awt.Color(255, 255, 255));
        MembershipTab.add(txtContact, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 240, 160, -1));

        buttonDownloadSOMF.setForeground(new java.awt.Color(16, 16, 16));
        buttonDownloadSOMF.setText(".");
        buttonDownloadSOMF.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonDownloadSOMFMouseClicked(evt);
            }
        });
        MembershipTab.add(buttonDownloadSOMF, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 130, 120, 40));

        buttonUploadRegForm.setForeground(new java.awt.Color(16, 16, 16));
        buttonUploadRegForm.setText(".");
        buttonUploadRegForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonUploadRegFormMouseClicked(evt);
            }
        });
        MembershipTab.add(buttonUploadRegForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 336, 120, 40));

        buttonViewRegForm.setForeground(new java.awt.Color(16, 16, 16));
        buttonViewRegForm.setText(".");
        buttonViewRegForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonViewRegFormMouseClicked(evt);
            }
        });
        MembershipTab.add(buttonViewRegForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 340, 120, 40));

        buttonUploadMembershipForm.setForeground(new java.awt.Color(16, 16, 16));
        buttonUploadMembershipForm.setText(".");
        buttonUploadMembershipForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonUploadMembershipFormMouseClicked(evt);
            }
        });
        MembershipTab.add(buttonUploadMembershipForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 416, 130, 50));

        buttonViewMembershipForm.setForeground(new java.awt.Color(16, 16, 16));
        buttonViewMembershipForm.setText(".");
        buttonViewMembershipForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonViewMembershipFormMouseClicked(evt);
            }
        });
        MembershipTab.add(buttonViewMembershipForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 420, 120, 40));

        buttonApply.setForeground(new java.awt.Color(16, 16, 16));
        buttonApply.setText(".");
        buttonApply.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonApplyMouseClicked(evt);
            }
        });
        MembershipTab.add(buttonApply, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 486, 230, 90));

        bgMembershipTab.setForeground(new java.awt.Color(255, 255, 255));
        bgMembershipTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/membership - Copy.png"))); // NOI18N
        MembershipTab.add(bgMembershipTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, 6, 940, -1));

        tabs.addTab("Membership", MembershipTab);

        AdminTab.setBackground(new java.awt.Color(16, 16, 16));
        AdminTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtCurrentEnqueuedNameAdmin.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtCurrentEnqueuedNameAdmin.setForeground(new java.awt.Color(255, 255, 255));
        txtCurrentEnqueuedNameAdmin.setText("No applicants in queue");
        AdminTab.add(txtCurrentEnqueuedNameAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 105, 240, 40));

        txtCurrentEnqueuedYearLevelAdmin.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtCurrentEnqueuedYearLevelAdmin.setForeground(new java.awt.Color(255, 255, 255));
        AdminTab.add(txtCurrentEnqueuedYearLevelAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 105, 70, 40));

        txtCurrentEnqueuedCourseAdmin.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtCurrentEnqueuedCourseAdmin.setForeground(new java.awt.Color(255, 255, 255));
        AdminTab.add(txtCurrentEnqueuedCourseAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 95, 90, 60));

        txtCurrentEnqueuedContactAdmin.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtCurrentEnqueuedContactAdmin.setForeground(new java.awt.Color(255, 255, 255));
        AdminTab.add(txtCurrentEnqueuedContactAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 195, 240, 50));

        txtCurrentNumberOfEnqueuedAdmin.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        txtCurrentNumberOfEnqueuedAdmin.setForeground(new java.awt.Color(255, 255, 255));
        txtCurrentNumberOfEnqueuedAdmin.setText("0");
        AdminTab.add(txtCurrentNumberOfEnqueuedAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 35, 100, 50));

        buttonViewCurrentEnqueuedRegFormAdmin.setForeground(new java.awt.Color(16, 16, 16));
        buttonViewCurrentEnqueuedRegFormAdmin.setText(".");
        buttonViewCurrentEnqueuedRegFormAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonViewCurrentEnqueuedRegFormAdminMouseClicked(evt);
            }
        });
        AdminTab.add(buttonViewCurrentEnqueuedRegFormAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, 120, 40));

        buttonViewCurrentEnqueuedMembershipFormAdmin.setForeground(new java.awt.Color(16, 16, 16));
        buttonViewCurrentEnqueuedMembershipFormAdmin.setText(".");
        buttonViewCurrentEnqueuedMembershipFormAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonViewCurrentEnqueuedMembershipFormAdminMouseClicked(evt);
            }
        });
        AdminTab.add(buttonViewCurrentEnqueuedMembershipFormAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 160, 130, 40));

        buttonApproveCurrentEnqueuedAdmin.setForeground(new java.awt.Color(16, 16, 16));
        buttonApproveCurrentEnqueuedAdmin.setText(".");
        buttonApproveCurrentEnqueuedAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonApproveCurrentEnqueuedAdminMouseClicked(evt);
            }
        });
        AdminTab.add(buttonApproveCurrentEnqueuedAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 200, 140, 60));

        buttonDeclineCurrentEnqueuedAdmin.setForeground(new java.awt.Color(16, 16, 16));
        buttonDeclineCurrentEnqueuedAdmin.setText(".");
        buttonDeclineCurrentEnqueuedAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonDeclineCurrentEnqueuedAdminMouseClicked(evt);
            }
        });
        AdminTab.add(buttonDeclineCurrentEnqueuedAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 210, 150, 50));

        txtSortMembers.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        txtSortMembers.setForeground(new java.awt.Color(255, 255, 255));
        txtSortMembers.setText("Latest Members");
        AdminTab.add(txtSortMembers, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 260, 190, 80));

        tblMembersAdmin.setBackground(new java.awt.Color(16, 16, 16));
        tblMembersAdmin.setForeground(new java.awt.Color(255, 255, 255));
        tblMembersAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Name", "Year Level", "Course", "Contact"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblMembersAdmin.setFocusable(false);
        tblMembersAdmin.setGridColor(new java.awt.Color(255, 255, 255));
        tblMembersAdmin.setRowHeight(50);
        tblMembersAdmin.setSelectionBackground(new java.awt.Color(255, 255, 153));
        tblMembersAdmin.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tblMembersAdmin.setShowHorizontalLines(true);
        tblMembersAdmin.getTableHeader().setReorderingAllowed(false);
        //
        tblMembersAdmin.getTableHeader().setBackground(new java.awt.Color(0, 0, 255));  // Header background to white
        tblMembersAdmin.getTableHeader().setFont(new java.awt.Font("Segoe UI", java.awt.Font.BOLD, 18));  // Header font to bold and 18pt
        tblMembersAdmin.getTableHeader().setForeground(new java.awt.Color(16, 16, 16));
        jScrollPane2.getViewport().setBackground(new java.awt.Color(16, 16, 16));  // Set the viewport's background color
        jScrollPane2.setViewportView(tblMembersAdmin);

        AdminTab.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 350, 570, 230));

        jPanel2.setBackground(new java.awt.Color(16, 16, 16));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        AdminTab.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 280, 220, 40));

        buttonReverseMembersList.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        buttonReverseMembersList.setText(" ↑ ↓");
        buttonReverseMembersList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonReverseMembersListActionPerformed(evt);
            }
        });
        AdminTab.add(buttonReverseMembersList, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 290, 60, 30));

        buttonSelectedNodeRowViewRegForm.setForeground(new java.awt.Color(16, 16, 16));
        buttonSelectedNodeRowViewRegForm.setText(".");
        buttonSelectedNodeRowViewRegForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonSelectedNodeRowViewRegFormMouseClicked(evt);
            }
        });
        AdminTab.add(buttonSelectedNodeRowViewRegForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 370, 220, 80));

        buttonSelectedNodeRowViewMembershipForm.setForeground(new java.awt.Color(16, 16, 16));
        buttonSelectedNodeRowViewMembershipForm.setText(".");
        buttonSelectedNodeRowViewMembershipForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonSelectedNodeRowViewMembershipFormMouseClicked(evt);
            }
        });
        AdminTab.add(buttonSelectedNodeRowViewMembershipForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 470, 230, 80));

        bgAdminTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/admin.png"))); // NOI18N
        bgAdminTab.setText("jLabel2");
        AdminTab.add(bgAdminTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, -1, -1));

        tabs.addTab("Admin", AdminTab);

        NewsTab.setBackground(new java.awt.Color(16, 16, 16));
        NewsTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NEWS (1).png"))); // NOI18N
        jLabel1.setText("jLabel1");
        NewsTab.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        tabs.addTab("News", NewsTab);

        EventsTab.setBackground(new java.awt.Color(16, 16, 16));
        EventsTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/EVENTS (1).png"))); // NOI18N
        jLabel2.setText("jLabel2");
        EventsTab.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        tabs.addTab("Events", EventsTab);

        SuggestTab.setBackground(new java.awt.Color(16, 16, 16));
        SuggestTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtSuggestName.setBackground(new java.awt.Color(16, 16, 16));
        txtSuggestName.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtSuggestName.setForeground(new java.awt.Color(255, 255, 255));
        SuggestTab.add(txtSuggestName, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 140, 220, 30));

        txtSuggestUser.setBackground(new java.awt.Color(30, 30, 30));
        txtSuggestUser.setColumns(20);
        txtSuggestUser.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtSuggestUser.setForeground(new java.awt.Color(255, 255, 255));
        txtSuggestUser.setRows(5);
        txtSuggestUser.setBorder(null);
        jScrollPane1.setViewportView(txtSuggestUser);

        SuggestTab.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 240, 350, 240));

        buttonPostSuggested.setForeground(new java.awt.Color(16, 16, 16));
        buttonPostSuggested.setText(".");
        buttonPostSuggested.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                buttonPostSuggestedMouseClicked(evt);
            }
        });
        SuggestTab.add(buttonPostSuggested, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 510, 250, 80));

        txtPosted.setBackground(new java.awt.Color(30, 30, 30));
        txtPosted.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane4.setViewportView(txtPosted);

        SuggestTab.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 170, 340, 380));

        bgSuggestTab.setIcon(new javax.swing.ImageIcon(getClass().getResource("/SUGGEST (1).png"))); // NOI18N
        bgSuggestTab.setText("jLabel3");
        SuggestTab.add(bgSuggestTab, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        tabs.addTab("Suggest", SuggestTab);

        AboutUsTab.setBackground(new java.awt.Color(16, 16, 16));
        AboutUsTab.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ABOUT US (1).png"))); // NOI18N
        jLabel5.setText("jLabel5");
        AboutUsTab.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        tabs.addTab("About Us", AboutUsTab);

        getContentPane().add(tabs, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, -41, 930, 670));

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Method to update and show the front node in the JLabel components
    public void updateFrontNodeLabels() {
        // Check if the queue is empty
        if (applicantQueue.front != null) {
            // Get the front node
            Node frontNode = applicantQueue.front;

            // Update the labels with the front node data
            txtCurrentEnqueuedNameAdmin.setText(frontNode.name);
            txtCurrentEnqueuedYearLevelAdmin.setText(frontNode.yearLevel);
            txtCurrentEnqueuedCourseAdmin.setText(frontNode.course);
            txtCurrentEnqueuedContactAdmin.setText(frontNode.contact);

            // Update the number of enqueued applicants (only the number)
            txtCurrentNumberOfEnqueuedAdmin.setText(String.valueOf(applicantQueue.size()));
        } else {
            // If the queue is empty, clear the labels
            txtCurrentEnqueuedNameAdmin.setText("No applicants in queue");
            txtCurrentEnqueuedYearLevelAdmin.setText("");
            txtCurrentEnqueuedCourseAdmin.setText("");
            txtCurrentEnqueuedContactAdmin.setText("");

            // Update the number of enqueued applicants (0 when empty)
            txtCurrentNumberOfEnqueuedAdmin.setText("0");
        }
    }

    
    private void buttonMembershipTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonMembershipTabMouseClicked
        tabs.setSelectedIndex(1);
    }//GEN-LAST:event_buttonMembershipTabMouseClicked

    private void buttonHomeTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonHomeTabMouseClicked
        tabs.setSelectedIndex(0);
    }//GEN-LAST:event_buttonHomeTabMouseClicked

    private void buttonDownloadSOMFMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonDownloadSOMFMouseClicked
        try {
            URI uri = new URI("https://docs.google.com/document");
            Desktop desktop = Desktop.getDesktop();
            if (Desktop.isDesktopSupported() && desktop.isSupported(Desktop.Action.BROWSE)) {
                desktop.browse(uri);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to open the link!");
        }
    }//GEN-LAST:event_buttonDownloadSOMFMouseClicked

    private void buttonUploadRegFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonUploadRegFormMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "bmp"));
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            regFormPath = selectedFile.getAbsolutePath(); // Use the class-level filePath
            JOptionPane.showMessageDialog(null, "Selected: " + selectedFile.getName());
        }
    }//GEN-LAST:event_buttonUploadRegFormMouseClicked

    private void buttonViewRegFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonViewRegFormMouseClicked
        if (regFormPath != null) { // Check if an image has been uploaded
            ImageIcon imageIcon = new ImageIcon(regFormPath);
            Image img = imageIcon.getImage();

            // Get original dimensions of the image
            int originalWidth = imageIcon.getIconWidth();
            int originalHeight = imageIcon.getIconHeight();

            // Get screen dimensions
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            int maxWidth = (int) (screenSize.width * 0.8); // 80% of screen width
            int maxHeight = (int) (screenSize.height * 0.8); // 80% of screen height

            // Calculate the scaling factor to maintain aspect ratio
            double widthScale = (double) maxWidth / originalWidth;
            double heightScale = (double) maxHeight / originalHeight;
            double scale = Math.min(widthScale, heightScale); // Use the smaller scaling factor

            // Resize only if needed
            if (scale < 1.0) {
                int newWidth = (int) (originalWidth * scale);
                int newHeight = (int) (originalHeight * scale);
                img = img.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
                imageIcon = new ImageIcon(img);
            }

            // Display the resized image in a JOptionPane
            JOptionPane.showMessageDialog(null, "", "View Image", JOptionPane.INFORMATION_MESSAGE, imageIcon);
        } else {
            JOptionPane.showMessageDialog(null, "No image selected!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonViewRegFormMouseClicked

    private void buttonUploadMembershipFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonUploadMembershipFormMouseClicked
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Image Files", "jpg", "png", "gif", "bmp"));
        int result = fileChooser.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            membershipFormPath = selectedFile.getAbsolutePath(); // Use the class-level membershipFormPath
            JOptionPane.showMessageDialog(null, "Selected: " + selectedFile.getName());
        }
    }//GEN-LAST:event_buttonUploadMembershipFormMouseClicked

    private void buttonViewMembershipFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonViewMembershipFormMouseClicked
        if (membershipFormPath != null) { // Check if a membership form image has been uploaded
            ImageIcon imageIcon = new ImageIcon(membershipFormPath);
            Image img = imageIcon.getImage();

            // Get original dimensions of the image
            int originalWidth = imageIcon.getIconWidth();
            int originalHeight = imageIcon.getIconHeight();

            // Get screen dimensions
            Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
            int maxWidth = (int) (screenSize.width * 0.8); // 80% of screen width
            int maxHeight = (int) (screenSize.height * 0.8); // 80% of screen height

            // Calculate the scaling factor to maintain aspect ratio
            double widthScale = (double) maxWidth / originalWidth;
            double heightScale = (double) maxHeight / originalHeight;
            double scale = Math.min(widthScale, heightScale); // Use the smaller scaling factor

            // Resize only if needed
            if (scale < 1.0) {
                int newWidth = (int) (originalWidth * scale);
                int newHeight = (int) (originalHeight * scale);
                img = img.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
                imageIcon = new ImageIcon(img);
            }

            // Display the resized image in a JOptionPane
            JOptionPane.showMessageDialog(null, "", "View Membership Form", JOptionPane.INFORMATION_MESSAGE, imageIcon);
        } else {
            JOptionPane.showMessageDialog(null, "No membership form selected!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonViewMembershipFormMouseClicked
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void buttonApplyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonApplyMouseClicked
        // Retrieve data from the form
        String name = txtName.getText();
        String yearLevel = (String) txtYearLevel.getSelectedItem();
        String course = (String) txtCourse.getSelectedItem();
        String contact = txtContact.getText();
        
        // Ensure regFormPath and membershipFormPath are not null
        if (regFormPath == null || membershipFormPath == null) {
            JOptionPane.showMessageDialog(null, "Please upload both registration forms!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Enqueue the captured data into the queue
        applicantQueue.enqueue(name, yearLevel, course, contact, regFormPath, membershipFormPath);

        // Clear all input fields and uploaded files for the next use
        txtName.setText("");
        txtYearLevel.setSelectedIndex(0);
        txtCourse.setSelectedIndex(0);
        txtContact.setText("");
        regFormPath = null;
        membershipFormPath = null;
        JOptionPane.showMessageDialog(null, "Application submitted successfully!");

        // Call the update method to update the labels
        updateFrontNodeLabels();
    }//GEN-LAST:event_buttonApplyMouseClicked

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNameActionPerformed

    private void buttonAdminTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonAdminTabMouseClicked
        tabs.setSelectedIndex(2);
    }//GEN-LAST:event_buttonAdminTabMouseClicked

    private void buttonViewCurrentEnqueuedRegFormAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonViewCurrentEnqueuedRegFormAdminMouseClicked
        // Check if the queue is not empty
        if (applicantQueue.front != null) {
            // Get the front node
            Node frontNode = applicantQueue.front;

            // Ensure the RegForm path is not null before displaying
            if (frontNode.regFormPath != null && !frontNode.regFormPath.isEmpty()) {
                ImageIcon regFormIcon = new ImageIcon(frontNode.regFormPath);
                Image regFormImage = regFormIcon.getImage();

                // Resize image to fit the screen if it's too big
                int originalWidth = regFormIcon.getIconWidth();
                int originalHeight = regFormIcon.getIconHeight();

                // Get screen dimensions
                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                int maxWidth = (int) (screenSize.width * 0.8);
                int maxHeight = (int) (screenSize.height * 0.8);

                double widthScale = (double) maxWidth / originalWidth;
                double heightScale = (double) maxHeight / originalHeight;
                double scale = Math.min(widthScale, heightScale);

                // Resize only if needed
                if (scale < 1.0) {
                    int newWidth = (int) (originalWidth * scale);
                    int newHeight = (int) (originalHeight * scale);
                    regFormImage = regFormImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
                    regFormIcon = new ImageIcon(regFormImage);
                }

                // Show the RegForm image in a JOptionPane
                JOptionPane.showMessageDialog(null, "", "View RegForm", JOptionPane.INFORMATION_MESSAGE, regFormIcon);
            } else {
                JOptionPane.showMessageDialog(null, "No RegForm uploaded for the front applicant!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No applicants in the queue!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonViewCurrentEnqueuedRegFormAdminMouseClicked

    private void buttonViewCurrentEnqueuedMembershipFormAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonViewCurrentEnqueuedMembershipFormAdminMouseClicked
        // Check if the queue is not empty
        if (applicantQueue.front != null) {
            // Get the front node
            Node frontNode = applicantQueue.front;

            // Ensure the MembershipForm path is not null before displaying
            if (frontNode.membershipFormPath != null && !frontNode.membershipFormPath.isEmpty()) {
                ImageIcon membershipFormIcon = new ImageIcon(frontNode.membershipFormPath);
                Image membershipFormImage = membershipFormIcon.getImage();

                // Resize image to fit the screen if it's too big
                int originalWidth = membershipFormIcon.getIconWidth();
                int originalHeight = membershipFormIcon.getIconHeight();

                // Get screen dimensions
                Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                int maxWidth = (int) (screenSize.width * 0.8);
                int maxHeight = (int) (screenSize.height * 0.8);

                double widthScale = (double) maxWidth / originalWidth;
                double heightScale = (double) maxHeight / originalHeight;
                double scale = Math.min(widthScale, heightScale);

                // Resize only if needed
                if (scale < 1.0) {
                    int newWidth = (int) (originalWidth * scale);
                    int newHeight = (int) (originalHeight * scale);
                    membershipFormImage = membershipFormImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
                    membershipFormIcon = new ImageIcon(membershipFormImage);
                }

                // Show the MembershipForm image in a JOptionPane
                JOptionPane.showMessageDialog(null, "", "View MembershipForm", JOptionPane.INFORMATION_MESSAGE, membershipFormIcon);
            } else {
                JOptionPane.showMessageDialog(null, "No MembershipForm uploaded for the front applicant!", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No applicants in the queue!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonViewCurrentEnqueuedMembershipFormAdminMouseClicked

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void stackToLinkedList() {
        // Step 1: Clear the linked list
        linkedList.clear();

        // Step 2: Populate the linked list with data from the stack
        Node currentNode = stack.getTop(); // Assume stack.getTop() gives the top node
        while (currentNode != null) {
            linkedList.addNode(new Node(
                currentNode.name,
                currentNode.yearLevel,
                currentNode.course,
                currentNode.contact,
                currentNode.regFormPath,
                currentNode.membershipFormPath
            ));
            currentNode = currentNode.next;
        }
    }

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void updateTable(){
        // Step 4: Display the linked list in the table
        DefaultTableModel tableModel = (DefaultTableModel) tblMembersAdmin.getModel();
        tableModel.setRowCount(0); // Clear existing rows

        Node temp = linkedList.head;
        int rowNumber = 1;
        while (temp != null) {
            tableModel.addRow(new Object[]{
                rowNumber++,
                temp.name,
                temp.yearLevel,
                temp.course,
                temp.contact
            });
            temp = temp.next;
        }
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void buttonApproveCurrentEnqueuedAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonApproveCurrentEnqueuedAdminMouseClicked
        Node frontNode = applicantQueue.dequeue();
        if (frontNode != null) {
            stack.push(frontNode);
            updateFrontNodeLabels();
            stackToLinkedList();
            updateTable();
            txtSortMembers.setText("Latest Members");
            isReversed = false;
            JOptionPane.showMessageDialog(null, "Applicant approved and moved to stack: " + frontNode.name);
        } else {
            JOptionPane.showMessageDialog(null, "No applicants in the queue!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonApproveCurrentEnqueuedAdminMouseClicked

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void buttonDeclineCurrentEnqueuedAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonDeclineCurrentEnqueuedAdminMouseClicked
        // Check if the queue is not empty
        if (applicantQueue.size() > 0) {
          // Dequeue the front node and get its information
          Node dequeuedNode = applicantQueue.dequeue();

          // Display the name and contact of the dequeued node
          JOptionPane.showMessageDialog(null, "Applicant Declined:\nName: " + dequeuedNode.name + "\nContact: " + dequeuedNode.contact);

          // Update the queue display
          updateFrontNodeLabels();
        } else {
          // If the queue is empty, display an error message
          JOptionPane.showMessageDialog(null, "No applicants in the queue to decline!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonDeclineCurrentEnqueuedAdminMouseClicked

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void buttonReverseMembersListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonReverseMembersListActionPerformed
        // Reverse the linked list if needed
        if (isReversed) {
            linkedList.reverse();
            updateTable();
            txtSortMembers.setText("Latest Members"); // Update the label to indicate normal order
        } else {
            linkedList.reverse();
            updateTable();
            txtSortMembers.setText("Oldest Members"); // Update the label to indicate reversed order
        }
        isReversed = !isReversed; // Toggle the reverse state

    }//GEN-LAST:event_buttonReverseMembersListActionPerformed

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void buttonSelectedNodeRowViewRegFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSelectedNodeRowViewRegFormMouseClicked
        stackToLinkedList();

        // Check if a row is selected
        int selectedRow = tblMembersAdmin.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to view the Registration Form.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Retrieve the selected name from the table
        String selectedName = (String) tblMembersAdmin.getValueAt(selectedRow, 1);

        // Check if the linked list has been updated and get the node for that name
        Node selectedNode = getNodeByName(selectedName);

        if (selectedNode == null) {
            JOptionPane.showMessageDialog(null, "Applicant not found in the list!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the RegForm path exists
        String regFormPath = selectedNode.regFormPath;
        if (regFormPath != null && !regFormPath.isEmpty()) {
            // Load and display the image in a JOptionPane
            showRegFormImage(regFormPath);
        } else {
            JOptionPane.showMessageDialog(null, "No Registration Form uploaded for this applicant!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonSelectedNodeRowViewRegFormMouseClicked

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void buttonSelectedNodeRowViewMembershipFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSelectedNodeRowViewMembershipFormMouseClicked
        stackToLinkedList();

        // Check if a row is selected
        int selectedRow = tblMembersAdmin.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Please select a row to view the Membership Form.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Retrieve the selected name from the table
        String selectedName = (String) tblMembersAdmin.getValueAt(selectedRow, 1);

        // Check if the linked list has been updated and get the node for that name
        Node selectedNode = getNodeByName(selectedName);

        if (selectedNode == null) {
            JOptionPane.showMessageDialog(null, "Applicant not found in the list!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Check if the Membership Form path exists
        String membershipFormPath = selectedNode.membershipFormPath;
        if (membershipFormPath != null && !membershipFormPath.isEmpty()) {
            // Load and display the image in a JOptionPane
            showMembershipFormImage(membershipFormPath);
        } else {
            JOptionPane.showMessageDialog(null, "No Membership Form uploaded for this applicant!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonSelectedNodeRowViewMembershipFormMouseClicked

    private void buttonNewsTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonNewsTabMouseClicked
        tabs.setSelectedIndex(3);
    }//GEN-LAST:event_buttonNewsTabMouseClicked

    private void buttonEventsTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonEventsTabMouseClicked
        tabs.setSelectedIndex(4);
    }//GEN-LAST:event_buttonEventsTabMouseClicked

    private void buttonSuggestTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonSuggestTabMouseClicked
        tabs.setSelectedIndex(5);
    }//GEN-LAST:event_buttonSuggestTabMouseClicked

    private void buttonAboutUsTabMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonAboutUsTabMouseClicked
        tabs.setSelectedIndex(6);
    }//GEN-LAST:event_buttonAboutUsTabMouseClicked

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void buttonPostSuggestedMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buttonPostSuggestedMouseClicked
        String name = txtSuggestName.getText().trim();
        String suggestion = txtSuggestUser.getText().trim();

        if (!name.isEmpty() && !suggestion.isEmpty()) {
            // Get the current timestamp
            String time = java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));

            // Create a new node with the name, suggestion, and time
            SuggestedNode newNode = new SuggestedNode(name, suggestion, time);

            // Push to stack
            suggestedstack.push(newNode);

            // Update displayed suggestions
            updatePostedSuggestions();

            // Clear input fields
            txtSuggestName.setText("");
            txtSuggestUser.setText("");

            JOptionPane.showMessageDialog(this, "Suggestion posted!");
        } else {
            JOptionPane.showMessageDialog(this, "Please enter both name and suggestion.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_buttonPostSuggestedMouseClicked
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    private void updatePostedSuggestions() {
        StyledDocument doc = txtPosted.getStyledDocument();
        txtPosted.setText(""); // Clear the text area before updating

        SuggestedNode currentNode = suggestedstack.getTop();

        // Define styles
        SimpleAttributeSet boldAttr = new SimpleAttributeSet();
        StyleConstants.setBold(boldAttr, true);
        StyleConstants.setFontSize(boldAttr, 16); // Font size for bold text

        SimpleAttributeSet normalAttr = new SimpleAttributeSet();
        StyleConstants.setFontSize(normalAttr, 16); // Font size for normal text

        SimpleAttributeSet italicAttr = new SimpleAttributeSet();
        StyleConstants.setItalic(italicAttr, true);
        StyleConstants.setFontSize(italicAttr, 14); // Font size for italic timestamp

        try {
            while (currentNode != null) {
                // Add separator line
                doc.insertString(doc.getLength(), "--------------------------------------------------------\n", normalAttr);

                // Add name in bold
                doc.insertString(doc.getLength(), currentNode.name + "\n", boldAttr);

                // Add time in italic
                doc.insertString(doc.getLength(), currentNode.time + "\n", italicAttr);

                // Add suggestion in normal style
                doc.insertString(doc.getLength(), currentNode.suggestion + "\n\n", normalAttr);

                currentNode = currentNode.next;
            }

            // Add final separator
            doc.insertString(doc.getLength(), "--------------------------------------------------------\n", normalAttr);

        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }
    
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // Method to get the node by name from the linked list
    private Node getNodeByName(String name) {
        Node currentNode = linkedList.head;
        while (currentNode != null) {
            if (currentNode.name.equals(name)) {
                return currentNode;  // Return the found node
            }
            currentNode = currentNode.next;
        }
        return null;  // Return null if not found
    }

    // Method to display the RegForm image in a JOptionPane
    private void showRegFormImage(String regFormPath) {
        ImageIcon regFormIcon = new ImageIcon(regFormPath);
        Image regFormImage = regFormIcon.getImage();

        // Resize image only if it's too large
        int originalWidth = regFormIcon.getIconWidth();
        int originalHeight = regFormIcon.getIconHeight();

        // Max dimensions to fit in the screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int maxWidth = (int) (screenSize.width * 0.8);
        int maxHeight = (int) (screenSize.height * 0.8);

        double widthScale = (double) maxWidth / originalWidth;
        double heightScale = (double) maxHeight / originalHeight;
        double scale = Math.min(widthScale, heightScale);

        // Resize image only if scale < 1.0
        if (scale < 1.0) {
            int newWidth = (int) (originalWidth * scale);
            int newHeight = (int) (originalHeight * scale);
            regFormImage = regFormImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            regFormIcon = new ImageIcon(regFormImage);
        }

        // Show the RegForm image
        JOptionPane.showMessageDialog(null, "", "View RegForm", JOptionPane.INFORMATION_MESSAGE, regFormIcon);
    }
    
    // Method to display the Membership Form image in a JOptionPane
    private void showMembershipFormImage(String membershipFormPath) {
        ImageIcon membershipFormIcon = new ImageIcon(membershipFormPath);
        Image membershipFormImage = membershipFormIcon.getImage();

        // Resize image only if it's too large
        int originalWidth = membershipFormIcon.getIconWidth();
        int originalHeight = membershipFormIcon.getIconHeight();

        // Max dimensions to fit in the screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int maxWidth = (int) (screenSize.width * 0.8);
        int maxHeight = (int) (screenSize.height * 0.8);

        double widthScale = (double) maxWidth / originalWidth;
        double heightScale = (double) maxHeight / originalHeight;
        double scale = Math.min(widthScale, heightScale);

        // Resize image only if scale < 1.0
        if (scale < 1.0) {
            int newWidth = (int) (originalWidth * scale);
            int newHeight = (int) (originalHeight * scale);
            membershipFormImage = membershipFormImage.getScaledInstance(newWidth, newHeight, Image.SCALE_SMOOTH);
            membershipFormIcon = new ImageIcon(membershipFormImage);
        }

        // Show the Membership Form image
        JOptionPane.showMessageDialog(null, "", "View Membership Form", JOptionPane.INFORMATION_MESSAGE, membershipFormIcon);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AboutUsTab;
    private javax.swing.JPanel AdminTab;
    private javax.swing.JPanel EventsTab;
    private javax.swing.JPanel HomeTab;
    private javax.swing.JPanel MembershipTab;
    private javax.swing.JPanel NewsTab;
    private javax.swing.JPanel SuggestTab;
    private javax.swing.JLabel bgAdminTab;
    private javax.swing.JLabel bgMembershipTab;
    private javax.swing.JLabel bgSidePanel;
    private javax.swing.JLabel bgSuggestTab;
    private javax.swing.JLabel buttonAboutUsTab;
    private javax.swing.JLabel buttonAdminTab;
    private javax.swing.JLabel buttonApply;
    private javax.swing.JLabel buttonApproveCurrentEnqueuedAdmin;
    private javax.swing.JLabel buttonDeclineCurrentEnqueuedAdmin;
    private javax.swing.JLabel buttonDownloadSOMF;
    private javax.swing.JLabel buttonEventsTab;
    private javax.swing.JLabel buttonHomeTab;
    private javax.swing.JLabel buttonMembershipTab;
    private javax.swing.JLabel buttonNewsTab;
    private javax.swing.JLabel buttonPostSuggested;
    private javax.swing.JButton buttonReverseMembersList;
    private javax.swing.JLabel buttonSelectedNodeRowViewMembershipForm;
    private javax.swing.JLabel buttonSelectedNodeRowViewRegForm;
    private javax.swing.JLabel buttonSuggestTab;
    private javax.swing.JLabel buttonUploadMembershipForm;
    private javax.swing.JLabel buttonUploadRegForm;
    private javax.swing.JLabel buttonViewCurrentEnqueuedMembershipFormAdmin;
    private javax.swing.JLabel buttonViewCurrentEnqueuedRegFormAdmin;
    private javax.swing.JLabel buttonViewMembershipForm;
    private javax.swing.JLabel buttonViewRegForm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane tabs;
    private javax.swing.JTable tblMembersAdmin;
    private javax.swing.JTextField txtContact;
    private javax.swing.JComboBox<String> txtCourse;
    private javax.swing.JLabel txtCurrentEnqueuedContactAdmin;
    private javax.swing.JLabel txtCurrentEnqueuedCourseAdmin;
    private javax.swing.JLabel txtCurrentEnqueuedNameAdmin;
    private javax.swing.JLabel txtCurrentEnqueuedYearLevelAdmin;
    private javax.swing.JLabel txtCurrentNumberOfEnqueuedAdmin;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextPane txtPosted;
    private javax.swing.JLabel txtSortMembers;
    private javax.swing.JTextField txtSuggestName;
    private javax.swing.JTextArea txtSuggestUser;
    private javax.swing.JComboBox<String> txtYearLevel;
    // End of variables declaration//GEN-END:variables
}
